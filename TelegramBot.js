import express from "express";
import bodyParser from "body-parser";
import TelegramBot from "node-telegram-bot-api";

const TOKEN = process.env.SUPPORT_BOT_TOKEN; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
const OWNER_ID = process.env.TELEGRAM_CHAT_ID; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3000;

const app = express();
app.use(bodyParser.json());

// Telegram Bot API (–∏—Å–ø–æ–ª—å–∑—É–µ–º webhook)
const bot = new TelegramBot(TOKEN);

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–≤—è–∑–∏ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –≤–ª–∞–¥–µ–ª–µ—Ü"
const userDialogs = new Map();

// –ö–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userName = msg.from.first_name + (msg.from.last_name ? ' ' + msg.from.last_name : '');
  const userId = msg.from.id;

  // –ï—Å–ª–∏ –ø–∏—à–µ—Ç –∫–ª–∏–µ–Ω—Ç
  if (chatId !== parseInt(OWNER_ID)) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!userDialogs.has(userId)) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
      const separator = await bot.sendMessage(
        OWNER_ID,
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüíé –î–ò–ê–õ–û–ì –° ${userName.toUpperCase()}\nüÜî ${userId}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
      );
      
      userDialogs.set(userId, {
        userChatId: chatId,
        userName: userName,
        separatorMessageId: separator.message_id
      });
    }

    const dialog = userDialogs.get(userId);
    
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    await bot.sendMessage(
      OWNER_ID,
      `<b>${userName}:</b> ${text}`,
      {
        parse_mode: 'HTML',
        reply_to_message_id: dialog.separatorMessageId
      }
    );

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    await bot.sendMessage(chatId, '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
  }

  // –ï—Å–ª–∏ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç—É (–≤ —Å–≤–æ—ë–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º)
  if (chatId === parseInt(OWNER_ID) && msg.reply_to_message) {
    const replyText = msg.text;
    const originalMessage = msg.reply_to_message;

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ separatorMessageId –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    for (const [userId, dialog] of userDialogs.entries()) {
      if (originalMessage.message_id === dialog.separatorMessageId || 
          originalMessage.reply_to_message_id === dialog.separatorMessageId) {
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(
          dialog.userChatId,
          `üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n${replyText}`,
          { parse_mode: 'HTML' }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥
        await bot.sendMessage(
          OWNER_ID,
          `<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> ${replyText}`,
          {
            parse_mode: 'HTML',
            reply_to_message_id: dialog.separatorMessageId
          }
        );
        
        break;
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.post("/webhook", (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.get("/", (req, res) => {
  res.send("Support Bot is running ‚úÖ");
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const webhookUrl = `https://${req.get('host')}/webhook`;
bot.setWebHook(webhookUrl)
  .then(() => console.log(`Webhook set to: ${webhookUrl}`))
  .catch(err => console.error('Webhook error:', err));

app.listen(PORT, () => console.log(`Support Bot Server is running on port ${PORT}`));